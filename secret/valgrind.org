#+TITLE: valgrind
#+AUTHOR: Sholde
#+DATE: May 2021

#+OPTIONS: html-postamble:nil

# Pur html
#+HTML_HEAD: <style>html {background-color: #000000; color: #e5e5e5;}</style>
#+HTML_HEAD: <style>body {background-color: #101010; margin: 100px;}</style>
#+HTML_HEAD: <style>div#content {padding: 10px; border: 1px solid white;}</style>
#+HTML_HEAD: <style>div#table-of-contents {background-color: #202020; margin: 20px; padding: 10px; border: 1px solid white;}</style>
#+HTML_HEAD: <style>div.outline-2 {background-color: #202020; margin: 20px; padding: 10px; border: 1px solid white;}</style>
#+HTML_HEAD: <style>h2 {border-bottom: 1px solid white;}</style>
#+HTML_HEAD: <style>h3 {border-bottom: 1px solid white;}</style>
#+HTML_HEAD: <style>a {text-decoration:none; color: #e5e5e5;}</style>
#+HTML_HEAD: <style>li {list-style-type: none;}</style>
#+HTML_HEAD: <style>a:hover {color: #00ff00; padding-left: 10px;}</style>

# Source
#+HTML_HEAD: <style>div#org-src-container {background-color: #303030; box-shadow: none;}</style>
#+HTML_HEAD: <style>pre:hover {border: 2px solid green;}</style>
#+HTML_HEAD: <style>pre {background-color: #303030; border: 2px solid white; box-shadow: none;}</style>
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>
#+HTML_HEAD: <style>pre.src:before {color: #000000;}</style>

* Introduction

  *valgrind* is a compilation of many tools. Here we will just use *Memcheck*
   module which are the *default*.

* Usage

  Compile your program and then run it with valgrind.

   #+BEGIN_SRC shell
     $ gcc prog.c -o prog
     $ valgrind ./prog
   #+END_SRC

* Example
** Without leak

   #+BEGIN_SRC c
int main()
{
  int a[5];
  return 0;
}
   #+END_SRC

   #+BEGIN_SRC shell
$ valgrind ./prog
==6756== Memcheck, a memory error detector
==6756== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6756== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==6756== Command: ./a.out
==6756== 
==6756== 
==6756== HEAP SUMMARY:
==6756==     in use at exit: 0 bytes in 0 blocks
==6756==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==6756== 
==6756== All heap blocks were freed -- no leaks are possible
==6756== 
==6756== For lists of detected and suppressed errors, rerun with: -s
==6756== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
   #+END_SRC

** With leak

   Here we don't *release* the pointer *a*.
   
   #+BEGIN_SRC c
#include <stdlib.h>

int main()
{
  int *a = malloc(sizeof(int) * 5);
  return 0;
}
   #+END_SRC
   
   #+BEGIN_SRC shell
$ valgrind ./a.out 
==6831== Memcheck, a memory error detector
==6831== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6831== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==6831== Command: ./a.out
==6831== 
==6831== 
==6831== HEAP SUMMARY:
==6831==     in use at exit: 20 bytes in 1 blocks
==6831==   total heap usage: 1 allocs, 0 frees, 20 bytes allocated
==6831== 
==6831== LEAK SUMMARY:
==6831==    definitely lost: 20 bytes in 1 blocks
==6831==    indirectly lost: 0 bytes in 0 blocks
==6831==      possibly lost: 0 bytes in 0 blocks
==6831==    still reachable: 0 bytes in 0 blocks
==6831==         suppressed: 0 bytes in 0 blocks
==6831== Rerun with --leak-check=full to see details of leaked memory
==6831== 
==6831== For lists of detected and suppressed errors, rerun with: -s
==6831== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
   #+END_SRC
