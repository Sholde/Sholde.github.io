#+TITLE: gdb
#+AUTHOR: Sholde
#+DATE: May 2021

#+OPTIONS: html-postamble:nil

# Pur html
#+HTML_HEAD: <style>html {background-color: #000000; color: #e5e5e5;}</style>
#+HTML_HEAD: <style>body {background-color: #101010; margin: 100px;}</style>
#+HTML_HEAD: <style>div#content {padding: 10px; border: 1px solid white;}</style>
#+HTML_HEAD: <style>div#table-of-contents {background-color: #202020; margin: 20px; padding: 10px; border: 1px solid white;}</style>
#+HTML_HEAD: <style>div.outline-2 {background-color: #202020; margin: 20px; padding: 10px; border: 1px solid white;}</style>
#+HTML_HEAD: <style>h2 {border-bottom: 1px solid white;}</style>
#+HTML_HEAD: <style>h3 {border-bottom: 1px solid white;}</style>
#+HTML_HEAD: <style>a {text-decoration:none; color: #e5e5e5;}</style>
#+HTML_HEAD: <style>li {list-style-type: none;}</style>
#+HTML_HEAD: <style>a:hover {color: #00ff00; padding-left: 10px;}</style>

# Source
#+HTML_HEAD: <style>div#org-src-container {background-color: #303030; box-shadow: none;}</style>
#+HTML_HEAD: <style>pre:hover {border: 2px solid green;}</style>
#+HTML_HEAD: <style>pre {background-color: #303030; border: 2px solid white; box-shadow: none;}</style>
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>
#+HTML_HEAD: <style>pre.src:before {color: #000000;}</style>

* Introduction

  *gdb* is the GNU debugger. It is often used to debug *ELF* programs written in
  *C*.

* Installation

  *gdb* is a popular tool and it is probably in your pakage manager list.

** Exemple on Arch Linux

   #+BEGIN_SRC shell
     $ sudo pacman -S --needed gdb
   #+END_SRC

* Usage

  Compile your program normally. Then run this command to use *gdb*:

  #+BEGIN_SRC shell
    $ gdb ./program
  #+END_SRC

* Interface

  *gdb* is a mini-shell, that is it will use your terminal but you will be able
   to type only its comand.

* List of command
** Execute and quit
   
  - *r or run:* run your program in gdb
  - *q or quit:* quit gdb

** Breakpoint

  - *b or breakpoint:* set a breakpoint
  - *c or continue:* continue to the next breakpoint

** Print

  - *p or print:* print the value of the variable
  - *w or watch:* print the value of the variable each time where it is set

** Callstak

  - *up:* go back to call
  - *bt:* print the callstack

** Disassemble

  - *disas or disassemble:* disassemble the given ot the latest function where
    breakpoint is set

** Move

  - *stepi or nexti:* they will go at the next *assembler* instruction but *nexti*
    will just go on your program instuction normally.
  - *s or step / n or next:* same as above but here they will go to the next
    *code* instruciton

* Tips

  Use ~-g3~ flag at compile line to enable all gdb fonctionality.

* Exemple

  #+BEGIN_SRC c
#include <stdio.h>

int main(int argc, char **argv)
{
  char *s = "Hello World";
  printf("%s\n", s);
  return 0;
}
  #+END_SRC

  #+BEGIN_SRC shell
    $ gcc -g3 hello.c -o hello
  #+END_SRC

  #+BEGIN_SRC shell
    $ gdb ./hello
  #+END_SRC

  Normally you should be have something like:
  
  #+BEGIN_SRC shell
GNU gdb (GDB) 10.1
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./hello...
(gdb) 
  #+END_SRC

  #+BEGIN_SRC shell
(gdb) b main
Breakpoint 1 at 0x1148: file hello.c, line 5.
(gdb) r
Starting program: /home/sholde/dev/perso/Sholde.github.io/secret/hello 

Breakpoint 1, main (argc=1, argv=0x7fffffffe4a8) at hello.c:5
5         char *s = "Hello World";
(gdb) disas
Dump of assembler code for function main:
   0x0000555555555139 <+0>:     push   %rbp
   0x000055555555513a <+1>:     mov    %rsp,%rbp
   0x000055555555513d <+4>:     sub    $0x20,%rsp
   0x0000555555555141 <+8>:     mov    %edi,-0x14(%rbp)
   0x0000555555555144 <+11>:    mov    %rsi,-0x20(%rbp)
=> 0x0000555555555148 <+15>:    lea    0xeb5(%rip),%rax        # 0x555555556004
   0x000055555555514f <+22>:    mov    %rax,-0x8(%rbp)
   0x0000555555555153 <+26>:    mov    -0x8(%rbp),%rax
   0x0000555555555157 <+30>:    mov    %rax,%rdi
   0x000055555555515a <+33>:    call   0x555555555030 <puts@plt>
   0x000055555555515f <+38>:    mov    $0x0,%eax
   0x0000555555555164 <+43>:    leave  
   0x0000555555555165 <+44>:    ret    
End of assembler dump.
(gdb) stepi
0x000055555555514f      5         char *s = "Hello World";
(gdb) disas
Dump of assembler code for function main:
   0x0000555555555139 <+0>:     push   %rbp
   0x000055555555513a <+1>:     mov    %rsp,%rbp
   0x000055555555513d <+4>:     sub    $0x20,%rsp
   0x0000555555555141 <+8>:     mov    %edi,-0x14(%rbp)
   0x0000555555555144 <+11>:    mov    %rsi,-0x20(%rbp)
   0x0000555555555148 <+15>:    lea    0xeb5(%rip),%rax        # 0x555555556004
=> 0x000055555555514f <+22>:    mov    %rax,-0x8(%rbp)
   0x0000555555555153 <+26>:    mov    -0x8(%rbp),%rax
   0x0000555555555157 <+30>:    mov    %rax,%rdi
   0x000055555555515a <+33>:    call   0x555555555030 <puts@plt>
   0x000055555555515f <+38>:    mov    $0x0,%eax
   0x0000555555555164 <+43>:    leave  
   0x0000555555555165 <+44>:    ret    
End of assembler dump.
(gdb) c
Continuing.
Hello World
[Inferior 1 (process 5638) exited normally]
(gdb) q
  #+END_SRC
